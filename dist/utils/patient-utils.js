'use strict';const dbUtils=require("./db-utils");function PatientUtils(){}function makeNextPid(a){return new Promise((b,c)=>{a.Patient.getLatestPid().then(a=>{var c;if(a=a[0]&&null!==(c=a[0])&&void 0!==c&&c.p_id?parseInt(a[0].p_id.replace("PAT","")):null,a){let c=1e3>a?"PAT"+("0000"+(a+1).toString()).slice(-4):"PAT"+(a+1).toString();return b(c)}return b("PAT0001")}).catch(a=>(console.error(`[UTILS] Error @ makeNextAid \n ${JSON.stringify(a)}`),c(a)))})}async function NewPatientHandler(a){try{for(let b in a)("p_id"==b||null===a[b]||void 0===a[b]||""===a[b])&&delete a[b];const c=await dbUtils.connect();// doc.p_id = doc.name.replace(/\s/g, '').split('.').filter(word => word.length > 2)[0].slice(0, 3) + doc.contact.toString().slice(-4);
var b=await makeNextPid(c);return a.p_id=b,await c.Patient.create(a),console.log(`[UTILS] NewPatientHandler success`),{status:201,body:a}}catch(a){return console.error(`[UTILS] Error @ NewPatientHandler \n ${JSON.stringify(a)}`),a}}async function AllPatientHandler(a=!1){try{const d=await dbUtils.connect();var b=await d.Patient.countAll();if(1>b)return console.log(`[UTILS] AllPatientHandler returns empty data`),{status:204,body:{}};if(a)return console.log(`[UTILS] AllPatientHandler success`),{status:200,body:{total_docs:b}};var c=await d.Patient.getAll();return console.log(`[UTILS] AllPatientHandler success`),{status:200,body:{total_docs:b,docs:c}}}catch(a){return console.error(`[UTILS] Error @ AllPatientHandler \n ${JSON.stringify(a)}`),a}}async function GetPatientHandler(a){try{const b=await dbUtils.connect(),c=await b.Patient.getByPid(a);return c?(console.log(`[UTILS] GetPatientHandler success`),{status:200,body:c}):(console.log(`[UTILS] GetPatientHandler returns empty data`),{status:204,body:{}})}catch(a){return console.error(`[UTILS] Error @ GetPatientHandler \n ${JSON.stringify(a)}`),a}}async function BulkPatientsHandler(a){try{const b=await dbUtils.connect(),c=await b.Patient.getByPidList(a);return c.length?(console.log(`[UTILS] BulkPatientsHandler success`),{status:200,body:{total_docs:c.length,docs:c}}):(console.log(`[UTILS] BulkPatientsHandler returns empty data`),{status:404,body:null})}catch(a){console.error(`[UTILS] Error @ BulkPatientsHandler`)}}async function GetDistinctAreasHandler(){try{const b=await dbUtils.connect();var a=await b.Patient.getDistinctArea();return!a||1>a.length?(console.log(`[UTILS] GetDistinctAreasHandler returns empty data`),{status:204,body:{}}):(console.log(`[UTILS] GetDistinctAreasHandler success`),{status:200,body:a})}catch(a){return console.error(`[UTILS] Error @ GetDistinctAreasHandler \n ${JSON.stringify(a)}`),a}}async function UpdatePatientHandler(a,b){try{for(let a in b)("p_id"==a||null===b[a]||void 0===b[a]||""===b[a])&&delete b[a];const c=await dbUtils.connect();return await c.Patient.updateDoc(a,b),console.log("[UTILS] UpdatePatientHandler success"),{status:200,body:b}}catch(a){return console.error(`[UTILS] Error @ UpdatePatientHandler \n ${JSON.stringify(a)}`),a}}async function SearchByName(a){console.log("[UTILS] Searching for Name");try{const c=await dbUtils.connect();var b=await c.Patient.findByName(a);return!b||1>b.length?(console.log(`[UTILS] SearchByName returns empty data`),{status:404,body:null}):(console.log(`[UTILS] SearchByName success`),{status:200,body:{total_docs:b.length,docs:b}})}catch(a){return console.error(`[UTILS] Error @ SearchByName \n ${JSON.stringify(a)}`),a}}async function SearchByArea(a){console.log("[UTILS] Searching for Area");try{const c=await dbUtils.connect();var b=await c.Patient.findByArea(a);return!b||1>b.length?(console.log(`[UTILS] SearchByArea returns empty data`),{status:404,body:null}):(console.log(`[UTILS] SearchByArea success`),{status:200,body:{total_docs:b.length,docs:b}})}catch(a){return console.error(`[UTILS] Error @ SearchByArea \n ${JSON.stringify(a)}`),a}}async function SearchByContact(a){console.log("[UTILS] Searching for Contact");try{if(isNaN(a))return console.log(`[UTILS] Requested search term is not a number`),{status:400,body:null};else{const c=await dbUtils.connect();var b=await c.Patient.findByContact(parseInt(a));return!b||1>b.length?(console.log(`[UTILS] SearchByContact returns empty data`),{status:404,body:null}):(console.log(`[UTILS] SearchByContact success`),{status:200,body:{total_docs:b.length,docs:b}})}}catch(a){return console.error(`[UTILS] Error @ SearchByContact \n ${JSON.stringify(a)}`),a}}function SearchPatientHandler(a,b){return"name"===b?SearchByName(a):"area"===b?SearchByArea(a):"contact"===b?SearchByContact(a):(console.log(`[UTILS] Unexpected search type ${b}`),{status:400,body:null})}PatientUtils.prototype.NewPatientHandler=NewPatientHandler,PatientUtils.prototype.AllPatientHandler=AllPatientHandler,PatientUtils.prototype.GetPatientHandler=GetPatientHandler,PatientUtils.prototype.BulkPatientsHandler=BulkPatientsHandler,PatientUtils.prototype.GetDistinctAreasHandler=GetDistinctAreasHandler,PatientUtils.prototype.UpdatePatientHandler=UpdatePatientHandler,PatientUtils.prototype.SearchPatientHandler=SearchPatientHandler,module.exports=new PatientUtils;