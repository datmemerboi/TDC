'use strict';const dbUtils=require("./db-utils"),fs=require("fs"),path=require("path"),xls=require("json2xls");function FileUtils(){}function fitForXls(a){var b=Object(a);return b.dob=a.dob?new Date(a.dob).toISOString():null,b.med_history=a.med_history&&a.med_history.length?a.med_history.join(","):null,b.current_meds=a.current_meds&&a.current_meds.length?a.current_meds.join(","):null,b.files=a.files&&a.files.length?a.files.join(","):null,b.created_at=a.created_at.toISOString(),delete b._id,b.__v,b}async function ExportPatientListHandler(){try{let b=new Date().toLocaleString("default",{month:"short",year:"numeric"}),c=path.join(__dirname,"..","..","data"),d=path.join(c,`Patient List(${b}).xls`);fs.existsSync(c)||fs.mkdirSync(c);const e=await dbUtils.connect();var a=await e.Patient.getAll();await dbUtils.close(),a=a.map(fitForXls);const f=xls(a,{fields:["p_id","name","dob","age","area","gender","address","contact","med_history","current_meds","files","created_at"]});return await fs.writeFileSync(d,f,"binary"),console.log(`[UTILS] ExportPatientListHandler success`),{status:200,body:{file:d}}}catch(a){return console.error(`[UTILS] Error @ ExportPatientListHandler \n ${JSON.stringify(a)}`),a}}ExportPatientListHandler().then(a=>console.log(a)).catch(a=>console.error(a));