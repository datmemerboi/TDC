'use strict';const dbUtils=require("./db-utils");function TreatmentUtils(){}function makeNextTid(a){return new Promise((b,c)=>{a.Treatment.getLatestTid().then(a=>{var c;if(a=a[0]&&null!==(c=a[0])&&void 0!==c&&c.t_id?parseInt(a[0].t_id.replace("TRT","")):null,a){let c=1e3>a?"TRT"+("0000"+(a+1).toString()).slice(-4):"TRT"+(a+1).toString();return b(c)}return b("TRT0001")}).catch(a=>c(a))})}async function checkCompatibility(a){try{const c=await dbUtils.connect();var b=await Promise.all(a.map(a=>c.Treatment.getByTid(a)));const d=[...new Set(b.map(a=>a.p_id))];// Get list of unique patients
if(1<d.length)throw`Multiple patient ids obtained ${d.join(",")}`;else return!0}catch(a){return console.error(`[UTILS] Error @ checkCompatibility \n ${JSON.stringify(a)}`),!1}}function sanitize(a){var b=Object(a);for(let c in b)("t_id"==c||null===b[c]||void 0===b[c]||""===b[c])&&delete b[c];return b.teeth_number&&"string"==typeof b.teeth_number&&(b.teeth_number=b.teeth_number.split(",").map(a=>parseInt(a))),b.treatment_date=1e12>b.treatment_date?new Date(1e3*b.treatment_date).getTime():b.treatment_date,b}async function NewTreatmentHandler(a){try{const b=await dbUtils.connect(),c=await makeNextTid(b);return a=sanitize(a),a.t_id=c,await b.Treatment.create(a),console.log(`[UTILS] NewTreatmentHandler success`),{status:201,body:a}}catch(a){return console.error(`[UTILS] Error @ NewTreatmentHandler \n ${JSON.stringify(a)}`),a}}async function AllTreatmentHandler(){try{const c=await dbUtils.connect();var a=await c.Treatment.countAll();if(1>a)return console.error(`[UTILS] AllTreatmentHandler returns empty data`),{status:404,body:null};var b=await c.Treatment.getAll();return console.log(`[UTILS] AllTreatmentHandler success`),{status:200,body:{total_docs:b.length,docs:b}}}catch(a){return console.error(`[UTILS] Error @ AllTreatmentHandler \n ${JSON.stringify(a)}`),a}}async function GetTreatmentHandler(a){try{const c=await dbUtils.connect();var b=await c.Treatment.getByTid(a);return b?(console.log(`[UTILS] GetTreatmentHandler success`),{status:200,body:b}):(console.log(`[UTILS] GetTreatmentHandler returns empty data`),{status:404,body:b})}catch(a){return console.error(`[UTILS] Error @ GetTreatmentHandler \n ${JSON.stringify(a)}`),a}}async function PidTreatmentHandler(a){try{const d=await dbUtils.connect();var b=await d.Treatment.countByPid(a);if(1>b)return console.log(`[UTILS] PidTreatmentHandler returns empty data`),{status:404,body:{}};var c=await d.Treatment.findByPid(a);return console.log(`[UTILS] PidTreatmentHandler success`),{status:200,body:{total_docs:b,docs:c}}}catch(a){return console.error(`[UTILS] Error @ PidTreatmentHandler \n ${JSON.stringify(a)}`),a}}async function DistinctProceduresHandler(){try{const b=await dbUtils.connect();var a=await b.Treatment.getDistinctProcedures();return 1>a.length?(console.log(`[UTILS] DistinctProceduresHandler returns empty data`),{status:404,body:{}}):(console.log(`[UTILS] DistinctProceduresHandler success`),{status:200,body:{total_docs:a.length,docs:a}})}catch(a){return console.error(`[UTILS] Error @ DistinctProceduresHandler \n ${JSON.stringify(a)}`),a}}async function DoctorTreatmentHandler(a,b=!1){try{const e=await dbUtils.connect();var c=await e.Treatment.countByDoctor(a);if(1>c)return console.log(`[UTILS] DoctorTreatmentHandler returns empty data`),{status:404,body:{}};if(b)return console.log(`[UTILS] DoctorTreatmentHandler success`),{status:200,body:{total_docs:c}};var d=await e.Treatment.findByDoctor(a);return console.log(`[UTILS] DoctorTreatmentHandler success`),{status:200,body:{total_docs:c,docs:d}}}catch(a){return console.error(`[UTILS] Error @ DoctorTreatmentHandler \n ${JSON.stringify(a)}`),a}}async function UpdateTreatmentHandler(a,b){try{const c=await dbUtils.connect();return b=sanitize(b),await c.Treatment.updateDoc(a,b),console.log(`[UTILS] UpdateTreatmentHandler success`),{status:200,body:b}}catch(a){return console.error(`[UTILS] Error @ UpdateTreatmentHandler \n ${JSON.stringify(a)}`),a}}async function DateTreatmentHandler(a,b){try{const d=await dbUtils.connect();a=1e12>a?1e3*a:a,b=1e12>b?1e3*b:b;var c=await d.Treatment.findBetweenDate(a,b);return console.log(`[UTILS] DateTreatmentHandler success`),{status:200,body:{total_docs:c.length,docs:c}}}catch(a){return console.error(`[UTILS] Error @ DateTreatmentHandler \n ${JSON.stringify(a)}`),a}}async function TreatmentHistoryHandler(a,b=!1){try{const e=await dbUtils.connect();var c=await e.Treatment.findByPid(a);if(!c.length||1>c.length)return console.log(`[UTILS] TreatmentHistoryHandler returns empty data`),{status:404,body:{}};var d={total_docs:c.length};return b?(d.procedures=c.map(a=>({procedure_done:a.procedure_done,treatment_date:a.treatment_date})).sort((c,a)=>a.treatment_date-c.treatment_date),d.doctors=[...new Set(c.map(a=>a.doctor))],d.last_visit=d.procedures[0].treatment_date):(d.procedures=c.map(a=>{var b,c;return{procedure_done:a.procedure_done,treatment_date:a.treatment_date,remarks:null!==(b=null===a||void 0===a?void 0:a.remarks)&&void 0!==b?b:null,doctor:a.doctor,teeth_number:null!==(c=null===a||void 0===a?void 0:a.teeth_number)&&void 0!==c?c:null,t_id:a.t_id}}).sort((c,a)=>a.treatment_date-c.treatment_date),d.doctors=[...new Set(c.map(a=>a.doctor))],d.last_visit=d.procedures[0].treatment_date),console.log(`[UTILS] TreatmentHistoryHandler success`),{status:200,body:d}}catch(a){return console.error(`[UTILS] Error @ TreatmentHistoryHandler \n ${JSON.stringify(a)}`),a}}async function CheckCompatibilityHandler(a){try{let b=await checkCompatibility(a);return console.log(`[UTILS] CheckCompatibilityHandler success`),{status:200,body:{compatible:b}}}catch(a){return console.error(`[UTILS] Error @ CheckCompatibilityHandler \n ${JSON.stringify(a)}`),a}}TreatmentUtils.prototype.NewTreatmentHandler=NewTreatmentHandler,TreatmentUtils.prototype.AllTreatmentHandler=AllTreatmentHandler,TreatmentUtils.prototype.GetTreatmentHandler=GetTreatmentHandler,TreatmentUtils.prototype.PidTreatmentHandler=PidTreatmentHandler,TreatmentUtils.prototype.DistinctProceduresHandler=DistinctProceduresHandler,TreatmentUtils.prototype.DoctorTreatmentHandler=DoctorTreatmentHandler,TreatmentUtils.prototype.UpdateTreatmentHandler=UpdateTreatmentHandler,TreatmentUtils.prototype.DateTreatmentHandler=DateTreatmentHandler,TreatmentUtils.prototype.TreatmentHistoryHandler=TreatmentHistoryHandler,TreatmentUtils.prototype.CheckCompatibilityHandler=CheckCompatibilityHandler,module.exports=new TreatmentUtils;